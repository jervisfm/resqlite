// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package proto_raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	AppendEntriesRequest
	LogEntry
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
	ClientCommandRequest
	ClientCommandResponse
*/
package proto_raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendEntriesRequest struct {
	// Leader's term
	Term int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// This is so that follower can redirect clients. Leader ID is hostname/IP + Port number of the
	// the leader. E.g. something like 10.10.1.2:50103
	LeaderId string `protobuf:"bytes,2,opt,name=leaderId" json:"leaderId,omitempty"`
	// Index of the log entry immediately preceeding the new ones
	PrevLogIndex int64 `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	// Term of prevLogIndex entry
	PrevLogTerm int64 `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	// Log entries to store. This can be empty for just for heartbeat messages.
	// Can send more than one for efficiency reasons.
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	// Leaders commit index.
	LeaderCommit int64 `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppendEntriesRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesRequest) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type LogEntry struct {
	// Data to be appended to the replicated log.
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// The term when the log entry command was received by the leader.
	Term int64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogEntry) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type AppendEntriesResponse struct {
	// RPC response code status. See https://godoc.org/google.golang.org/grpc/codes
	ResponseStatus uint32 `protobuf:"varint,1,opt,name=responseStatus" json:"responseStatus,omitempty"`
	// Current term for leader to update itself.
	Term int64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	// True if follower contained entry matching prevLogIndex and prevLogTerm
	Success bool `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesResponse) GetResponseStatus() uint32 {
	if m != nil {
		return m.ResponseStatus
	}
	return 0
}

func (m *AppendEntriesResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// This invoked by candidated to gather votes.
type RequestVoteRequest struct {
	// Candidate's term
	Term int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// Candidate requesting the vote.
	// This is the fully qualified name for the node (hostname/ip + port number).
	CandidateId string `protobuf:"bytes,2,opt,name=candidateId" json:"candidateId,omitempty"`
	// Index of candidate's last log entry
	LastLogIndex int64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	// Term of candidate's last log entry
	LastLogTerm int64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteRequest) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	// RPC response code status. See https://godoc.org/google.golang.org/grpc/codes
	ResponseStatus uint32 `protobuf:"varint,1,opt,name=responseStatus" json:"responseStatus,omitempty"`
	// Current term for candidate to update themselves.
	Term int64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	// If true, indicates that the node has voted for the candidate to be a leader.
	VoteGranted bool `protobuf:"varint,3,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestVoteResponse) GetResponseStatus() uint32 {
	if m != nil {
		return m.ResponseStatus
	}
	return 0
}

func (m *RequestVoteResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// Request received from raft clients to execute a command.
type ClientCommandRequest struct {
	// Command that client wants to execute. Typically, this should be a serialized
	// form of some message that the replicated service will know how to pass.
	// For ReSqlite: this should be the SqlCommandRequest proto.
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *ClientCommandRequest) Reset()                    { *m = ClientCommandRequest{} }
func (m *ClientCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientCommandRequest) ProtoMessage()               {}
func (*ClientCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClientCommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// Response returns to raft clients from executing a command.
type ClientCommandResponse struct {
	// Standard RPC response code status. See https://godoc.org/google.golang.org/grpc/codes
	// Indicates whether client command was successfully executed.
	// If Code.OK - that means client command was replicated/executed ona majority of the raft cluster.
	ResponseStatus uint32 `protobuf:"varint,1,opt,name=responseStatus" json:"responseStatus,omitempty"`
}

func (m *ClientCommandResponse) Reset()                    { *m = ClientCommandResponse{} }
func (m *ClientCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientCommandResponse) ProtoMessage()               {}
func (*ClientCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClientCommandResponse) GetResponseStatus() uint32 {
	if m != nil {
		return m.ResponseStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*AppendEntriesRequest)(nil), "proto_raft.AppendEntriesRequest")
	proto.RegisterType((*LogEntry)(nil), "proto_raft.LogEntry")
	proto.RegisterType((*AppendEntriesResponse)(nil), "proto_raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "proto_raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "proto_raft.RequestVoteResponse")
	proto.RegisterType((*ClientCommandRequest)(nil), "proto_raft.ClientCommandRequest")
	proto.RegisterType((*ClientCommandResponse)(nil), "proto_raft.ClientCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	// Sends an AppendEntries RPC.
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	// Send a RequestVote RPC.
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	// RPC to receive and process client command requests.
	ClientCommand(ctx context.Context, in *ClientCommandRequest, opts ...grpc.CallOption) (*ClientCommandResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/proto_raft.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/proto_raft.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) ClientCommand(ctx context.Context, in *ClientCommandRequest, opts ...grpc.CallOption) (*ClientCommandResponse, error) {
	out := new(ClientCommandResponse)
	err := grpc.Invoke(ctx, "/proto_raft.Raft/ClientCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	// Sends an AppendEntries RPC.
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	// Send a RequestVote RPC.
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	// RPC to receive and process client command requests.
	ClientCommand(context.Context, *ClientCommandRequest) (*ClientCommandResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_ClientCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).ClientCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_raft.Raft/ClientCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).ClientCommand(ctx, req.(*ClientCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "ClientCommand",
			Handler:    _Raft_ClientCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0xd0, 0x24, 0x63, 0xc2, 0x61, 0x49, 0x25, 0x2b, 0x87, 0x62, 0xf6, 0x80, 0x72,
	0xc1, 0x42, 0xe1, 0x01, 0x10, 0xad, 0x10, 0xaa, 0xd4, 0x43, 0x64, 0x50, 0xae, 0x68, 0xeb, 0x9d,
	0x06, 0x4b, 0xb1, 0xd7, 0xdd, 0x9d, 0x54, 0xf0, 0x06, 0x1c, 0x79, 0x44, 0x1e, 0x05, 0xed, 0xda,
	0x4e, 0xd7, 0xc1, 0x54, 0x42, 0xe2, 0x94, 0x9d, 0x6f, 0x77, 0x66, 0xbe, 0x9f, 0x18, 0x40, 0x8b,
	0x5b, 0x4a, 0x2a, 0xad, 0x48, 0x31, 0x70, 0x3f, 0x5f, 0x2c, 0xc2, 0x7f, 0x05, 0x30, 0x7f, 0x5f,
	0x55, 0x58, 0xca, 0x0f, 0x25, 0xe9, 0x1c, 0x4d, 0x8a, 0x77, 0x7b, 0x34, 0xc4, 0x18, 0x8c, 0x08,
	0x75, 0x11, 0x05, 0x71, 0xb0, 0x1c, 0xa6, 0xee, 0xcc, 0x16, 0x30, 0xd9, 0xa1, 0x90, 0xa8, 0xaf,
	0x64, 0x34, 0x88, 0x83, 0xe5, 0x34, 0x3d, 0xd4, 0x8c, 0xc3, 0xd3, 0x4a, 0xe3, 0xfd, 0xb5, 0xda,
	0x5e, 0x95, 0x12, 0xbf, 0x45, 0x43, 0xd7, 0xd7, 0xc1, 0x58, 0x0c, 0x61, 0x53, 0x7f, 0xb6, 0xa3,
	0x47, 0xee, 0x89, 0x0f, 0xb1, 0x04, 0xc6, 0x58, 0xf3, 0x88, 0x9e, 0xc4, 0xc3, 0x65, 0xb8, 0x9a,
	0x27, 0x0f, 0x64, 0x93, 0x6b, 0xb5, 0xb5, 0x2c, 0xbf, 0xa7, 0xed, 0x23, 0xbb, 0xb5, 0x66, 0x70,
	0xa9, 0x8a, 0x22, 0xa7, 0xe8, 0xb4, 0xde, 0xea, 0x63, 0x7c, 0x05, 0x93, 0xb6, 0xd1, 0xaa, 0x92,
	0x82, 0x84, 0x53, 0x35, 0x4d, 0xdd, 0xf9, 0xa0, 0x74, 0xf0, 0xa0, 0x94, 0x17, 0x70, 0x76, 0xe4,
	0x8a, 0xa9, 0x54, 0x69, 0x90, 0xbd, 0x82, 0x67, 0xba, 0x39, 0x7f, 0x22, 0x41, 0x7b, 0xe3, 0x46,
	0xcd, 0xd2, 0x23, 0xb4, 0x6f, 0x28, 0x8b, 0x60, 0x6c, 0xf6, 0x59, 0x86, 0xc6, 0x38, 0x77, 0x26,
	0x69, 0x5b, 0xf2, 0x9f, 0x01, 0xb0, 0xc6, 0xf8, 0x8d, 0x22, 0x7c, 0x2c, 0x83, 0x18, 0xc2, 0x4c,
	0x94, 0x32, 0x97, 0x82, 0xf0, 0x10, 0x83, 0x0f, 0x39, 0x4f, 0x84, 0xa1, 0xe3, 0x24, 0x7c, 0xcc,
	0x4e, 0x69, 0x6a, 0x3f, 0x09, 0x0f, 0xe2, 0x06, 0x9e, 0x77, 0x18, 0xfd, 0x07, 0xfd, 0x31, 0x84,
	0xf7, 0x8a, 0xf0, 0xa3, 0x16, 0x25, 0xa1, 0x6c, 0x3c, 0xf0, 0x21, 0xfe, 0x06, 0xe6, 0x97, 0xbb,
	0x1c, 0x4b, 0xb2, 0xd1, 0x89, 0x52, 0xb6, 0x46, 0x44, 0x30, 0xce, 0x6a, 0xa4, 0x49, 0xae, 0x2d,
	0xf9, 0x3b, 0x38, 0x3b, 0xea, 0xf8, 0x37, 0xa2, 0xab, 0x1f, 0x03, 0x18, 0xa5, 0xe2, 0x96, 0xd8,
	0x06, 0x66, 0x9d, 0xc8, 0x59, 0xec, 0xff, 0xf5, 0xfa, 0xbe, 0x91, 0xc5, 0xcb, 0x47, 0x5e, 0xd4,
	0x4b, 0xf8, 0x09, 0x5b, 0x43, 0xe8, 0x19, 0xc9, 0xce, 0xfd, 0x9e, 0x3f, 0x33, 0x5f, 0xbc, 0xf8,
	0xeb, 0xfd, 0x61, 0xe2, 0x06, 0x66, 0x1d, 0xcd, 0x5d, 0xa6, 0x7d, 0x06, 0x76, 0x99, 0xf6, 0x1a,
	0xc6, 0x4f, 0x2e, 0x5e, 0xc3, 0x79, 0xa6, 0x8a, 0x64, 0x9b, 0xd3, 0xd7, 0xfd, 0x4d, 0xa2, 0xd1,
	0xdc, 0xed, 0x72, 0xc2, 0xba, 0x33, 0xb1, 0x9d, 0x17, 0x53, 0xeb, 0xd4, 0xda, 0xd6, 0xeb, 0xe0,
	0xe6, 0xd4, 0x5d, 0xbc, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xba, 0x36, 0xd8, 0x5b, 0x04,
	0x00, 0x00,
}
