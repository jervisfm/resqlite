// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package proto_raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	AppendEntriesRequest
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
*/
package proto_raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendEntriesRequest struct {
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AppendEntriesResponse struct {
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RequestVoteRequest struct {
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RequestVoteResponse struct {
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*AppendEntriesRequest)(nil), "proto_raft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "proto_raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "proto_raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "proto_raft.RequestVoteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	// Sends an AppendEntries RPC.
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	// Send a RequestVote RPC.
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/proto_raft.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/proto_raft.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	// Sends an AppendEntries RPC.
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	// Send a RequestVote RPC.
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0x4c, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x53, 0xf1, 0x20, 0x11, 0x25, 0x31, 0x2e,
	0x11, 0xc7, 0x82, 0x82, 0xd4, 0xbc, 0x14, 0xd7, 0xbc, 0x92, 0xa2, 0xcc, 0xd4, 0xe2, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x71, 0x2e, 0x51, 0x34, 0xf1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x25, 0x11, 0x2e, 0x21, 0xa8, 0x9a, 0xb0, 0xfc, 0x92, 0x54, 0x98, 0x72, 0x51, 0x2e, 0x61,
	0x14, 0x51, 0x88, 0x62, 0xa3, 0x0d, 0x8c, 0x5c, 0x2c, 0x41, 0x89, 0x69, 0x25, 0x42, 0x61, 0x5c,
	0xbc, 0x28, 0xc6, 0x09, 0x29, 0xe8, 0x21, 0x1c, 0xa1, 0x87, 0xcd, 0x05, 0x52, 0x8a, 0x78, 0x54,
	0x40, 0xdd, 0xc2, 0x20, 0x14, 0xc0, 0xc5, 0x8d, 0x64, 0xaf, 0x90, 0x1c, 0xb2, 0x1e, 0x4c, 0x67,
	0x4a, 0xc9, 0xe3, 0x94, 0x87, 0x99, 0xe8, 0xa4, 0xcb, 0x25, 0x97, 0x9c, 0x9f, 0xab, 0x97, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x57, 0x94, 0x5a, 0x5c, 0x98, 0x93, 0x59, 0x92, 0x0a, 0xd1, 0xa7,
	0x07, 0xd2, 0xe7, 0xc4, 0x09, 0xf2, 0x51, 0x00, 0x88, 0x1f, 0xc0, 0x98, 0xc4, 0x06, 0x96, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x9d, 0xf2, 0x27, 0x60, 0x01, 0x00, 0x00,
}
